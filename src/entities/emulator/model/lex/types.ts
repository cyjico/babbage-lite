/**
 * Defines the types of tokens generated by `tokenize()`.
 *
 * - `<...>Card`: Captures the symbol (e.g. `CF?` in `CF?10`).
 * - `LiteralNumber`: Captures numeric values (e.g. `10` in `CF?10`).
 */
export const enum TokenType {
  Unknown,
  // Number:
  // N<3-digit number>
  NumberCard,
  // Variable:
  // L<3-digit number> S<3-digit number>
  VariableCard,
  // Combinatorial:
  // CF?<number> CB?<number>
  // CF+<number> CB+<number>
  CombinatorialCard,
  OperationCard,
  ActionCard,
  NumericLiteral,
}

interface Token_<T extends TokenType = TokenType, U extends string = string> {
  type: T;
  lexeme: U;
  ln: number;
  col: number;
}

interface Token_NumberCard extends Token_<TokenType.NumberCard, `N${number}`> {}

interface Token_VariableCard
  extends Token_<TokenType.VariableCard, `L${number}` | `S${number}`> {}

interface Token_CombinatorialCard
  extends Token_<
    TokenType.CombinatorialCard,
    `CF?${number}` | `CB?${number}` | `CF+${number}` | `CB+${number}`
  > {}

interface Token_OperationCard
  extends Token_<TokenType.OperationCard, "+" | "-" | "*" | "/"> {}

interface Token_ActionCard
  extends Token_<TokenType.ActionCard, "P" | "B" | "H"> {}

interface Token_NumericLiteral
  extends Token_<TokenType.NumericLiteral, `${number}`> {}

/**
 * Discriminated union of all tokens.
 */
export type Token =
  | Token_NumberCard
  | Token_VariableCard
  | Token_CombinatorialCard
  | Token_OperationCard
  | Token_ActionCard
  | Token_NumericLiteral;

export type TokenWithType<T extends TokenType> = Token & { type: T };
